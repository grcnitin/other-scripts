#!/bin/bash

rm -f temp.txt
touch temp.txt
RED='\033[0;31m'
Green='\033[0;32m'
NC='\033[0m'

BOOT_DISK=/dev/nvme0n1
DATA_DISK1=/dev/sda
#DATA_DISK2=/dev/sdb
RAID_DISK=/dev/md0

# ------------------------------
# Configure local repo for installer
# ------------------------------
cat <<EOF > /etc/pacman.conf
[options]
SigLevel = Never
LocalFileSigLevel = Optional
HoldPkg     = pacman glibc

[localrepo]
Server = http://192.168.15.96:8080/pkgs
EOF

ip a
yes '' | sed 3q
echo "Enter interface management interface name"
read mgmtint

yes '' | sed 3q
echo "Enter HOSTNAME"
read hostname
HOST_NAME=$hostname
echo Hostname is $HOST_NAME

yes '' | sed 3q
echo "Enter TIMEZONE"
read timezone
TIME_ZONE=$timezone
echo Timezone is $TIME_ZONE

ROOT_KEY="ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC0Fjw9qyijwpsGAyWIpBI1Bjjy2fKeOrr9bGMnGNVhcZWFvsWMvgRfmVh5TLyZ/qVOb6xfyca/hBYmUqTgKvclLmZWyXkwodHRtXsjwKB/vCSHacOnKwtfvkYdMyJbrDAa8Sx7NpzvJE8im6bjtkGCDd20yvmsxQRvP/nGvovCrpIsrIjsvrlyhfWadYlvL+98Rywvmb6om9w713VWVBXYbNWshvODFFcPJ5AvvnxORt91UGMprF/wUtzQgVuUzIinvZcTWvYeYTJX0UuqbWPqVCx/pq9ZDSxTnp2WPe6ApfmClkhIIppQN7GSwT5JJeX4iFnciq/EQWDXMVe+xa3mVE9M+MTBGb/o+SuIAyYmBgCfSQkkRgn24nIEpihlZkrsKP4AkKPf6MjJoOZxmO7WLjgbmZYAW4P6B5NNL3en0XtWLRBRlUew44S/I3VovrZE2gGbe91q129f51ah+j1ynJDsGxIFlaf93XsZgS6lmK7TEEcS/qSd16Ny073YgArMMgICsp0+IqUiETRwdTcdajQdVIMNaFYMx2FexkWryCEiJ/ZJx0TC3lF3lirx5KtY4Qee2PufrArN3XEJ7MOVA31d2vD/t/mTKbJTVSaxWn/aPGlNiYKWssGMxWmkP1GU7bUJmyvwP76CyYeKHADpMxdWrbRFunggbWCRgmH5zw== rituka.sharma@gravitontrading.com"

# ------------------------------
# Disk partitioning
# ------------------------------
parted -s "${BOOT_DISK}" mklabel gpt
parted -s "${BOOT_DISK}" mkpart ESP fat32 1MiB 513MiB
parted -s "${BOOT_DISK}" set 1 boot on
parted -s "${BOOT_DISK}" mkpart primary ext4 513MiB 100%
partprobe "${BOOT_DISK}"

mkfs.fat -F32 "${BOOT_DISK}"p1
dosfslabel "${BOOT_DISK}"p1 "EFISYS"
mkfs.ext4 "${BOOT_DISK}"p2
mount "${BOOT_DISK}"p2 /mnt
mkdir -p /mnt/boot
mount "${BOOT_DISK}"p1 /mnt/boot

# ------------------------------
# Install base system from local repo
# ------------------------------
pacstrap -C /etc/pacman.conf /mnt base base-devel --noconfirm

# ------------------------------
# Configure system
# ------------------------------
ln -s /usr/share/zoneinfo/"${TIME_ZONE}" /mnt/etc/localtime
sed -i '/^#en_US.UTF-8/s/^#//' /mnt/etc/locale.gen
arch-chroot /mnt locale-gen
echo "LANG=en_US.UTF-8" > /mnt/etc/locale.conf
echo "${HOST_NAME}" > /mnt/etc/hostname
genfstab -U /mnt > /mnt/etc/fstab

# ------------------------------
# Setup local repo inside chroot
# ------------------------------
cat <<EOF > /mnt/etc/pacman.conf
[options]
SigLevel = Never
LocalFileSigLevel = Optional
HoldPkg     = pacman glibc

[localrepo]
Server = http://192.168.15.96:8080/pkgs
EOF

# ------------------------------
# Kernel + tools
# ------------------------------
arch-chroot /mnt pacman --noconfirm -S mkinitcpio
arch-chroot /mnt pacman --noconfirm -S linux linux-headers linux-lts linux-lts-headers

# ------------------------------
# Other packages
# ------------------------------
arch-chroot /mnt pacman --noconfirm -S \
git jshon bc cronie dbus-glib efibootmgr htop i7z tmux vim multitail \
netctl man nano gdb lsof mutt openssh perf pkgfile powerline \
python-configobj python-msgpack rlwrap net-tools inetutils ethtool \
python-pandas python-psutil python-pyinotify python-setproctitle \
python-tornado r rsync s3cmd socat

# (python2-gobject removed â†‘)

# ------------------------------
# Initramfs
# ------------------------------
arch-chroot /mnt mkinitcpio -P

# ------------------------------
# Bootloader setup
# ------------------------------
arch-chroot /mnt bootctl install
mkdir -p /mnt/boot/EFI/systemd /mnt/boot/EFI/Boot
cp /mnt/usr/lib/systemd/boot/efi/systemd-bootx64.efi /mnt/boot/EFI/systemd/
cp /mnt/usr/lib/systemd/boot/efi/systemd-bootx64.efi /mnt/boot/EFI/Boot/BOOTX64.EFI
arch-chroot /mnt efibootmgr -c -d "${BOOT_DISK}"p1 -p 1 -l /EFI/systemd/systemd-bootx64.efi -L "Linux Boot Manager"

mkdir -p /mnt/boot/loader/entries
cat << EOF > /mnt/boot/loader/entries/linux-lts.conf
title          Arch Linux LTS
linux          /vmlinuz-linux-lts
initrd         /initramfs-linux-lts.img
options        root=PARTUUID=$(cd /dev/disk/by-partuuid/; for v in *; do if [ $(readlink -f $v) == "${BOOT_DISK}"p2 ]; then echo $v; fi; done) rw intel_idle.max_cstate=0 idle=poll
EOF

cat << EOF > /mnt/boot/loader/loader.conf
default linux-lts
timeout 5
EOF

# ------------------------------
# Users and sudo
# ------------------------------
arch-chroot /mnt useradd -g users -s /bin/bash -m -o -u 1000 trading
cat << EOF > /mnt/etc/security/limits.conf
@users soft core unlimited
EOF

cat << EOF > /mnt/etc/sudoers.d/trading
trading ALL=(ALL) NOPASSWD: ALL
EOF

# ------------------------------
# Networking
# ------------------------------
mkdir /mnt/etc/netctl
Address=$(ip add show $mgmtint | grep inet | head -1 | awk {'print $2'})
Gateway=$(ip route show default | awk {'print $3'})
cat << EOF > /mnt/etc/netctl/mgmt
Description='management link'
Interface=$mgmtint
Connection=ethernet
SkipNoCarrier=yes
IP=static
Address=('$Address')
Gateway='$Gateway'
DNS=('8.8.8.8')
EOF

echo -e "${RED} Please verify netctl output below before reboot ${NC}" >> temp.txt
cat /mnt/etc/netctl/mgmt >> temp.txt
arch-chroot /mnt netctl enable mgmt

# ------------------------------
# SSH setup
# ------------------------------
mkdir -p /mnt/root/.ssh
echo "${ROOT_KEY}" > /mnt/root/.ssh/authorized_keys

mkdir -p /mnt/home/trading/.ssh
echo "${ROOT_KEY}" > /mnt/home/trading/.ssh/authorized_keys

# Make sure sshd_config exists (openssh pkg installed above)
arch-chroot /mnt sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
arch-chroot /mnt sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config

arch-chroot /mnt echo root:123456 | chpasswd
arch-chroot /mnt systemctl enable sshd.service
arch-chroot /mnt systemctl enable cronie.service

yes '' | sed 5q
cat temp.txt
